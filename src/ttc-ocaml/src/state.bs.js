// Generated by BUCKLESCRIPT VERSION 3.0.0, PLEASE EDIT WITH CARE
'use strict';

var Ai = require("./ai.bs.js");
var List = require("bs-platform/lib/js/list.js");
var Board = require("./board.bs.js");
var Player = require("./player.bs.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Caml_int32 = require("bs-platform/lib/js/caml_int32.js");
var Components = require("./components.bs.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");

function init_state(n, bots) {
  var init_003 = /* destination_deck */Components.DestinationDeck[/* init_deck */2](/* () */0);
  var init_004 = /* destination_trash */Components.DestinationDeck[/* init_trash */3];
  var init_006 = /* train_deck */Components.TrainDeck[/* init_deck */1](/* () */0);
  var init_007 = /* facing_up_trains */Components.TrainDeck[/* init_faceup */6](/* () */0);
  var init_008 = /* train_trash */Components.TrainDeck[/* init_trash */2];
  var init = /* record */[
    /* player_index */0,
    /* players : [] */0,
    /* routes : [] */0,
    init_003,
    init_004,
    /* choose_destinations : [] */0,
    init_006,
    init_007,
    init_008,
    /* taking_routes */false,
    /* error */"Number players must be 2-5.",
    /* turn_ended */false,
    /* last_round */false,
    /* winner : None */0,
    /* cards_grabbed */0,
    /* success */""
  ];
  if ((n + bots | 0) < 2 || (n + bots | 0) > 5) {
    return init;
  } else {
    var players = Player.init_players(n, false);
    var bots$1 = Player.init_players(bots, true);
    return /* record */[
            /* player_index */0,
            /* players */Pervasives.$at(players, bots$1),
            /* routes */Board.routes,
            init_003,
            init_004,
            /* choose_destinations : [] */0,
            init_006,
            init_007,
            init_008,
            /* taking_routes */false,
            /* error */"",
            /* turn_ended */false,
            /* last_round */false,
            /* winner : None */0,
            /* cards_grabbed */0,
            /* success */""
          ];
  }
}

var st = init_state(2, 0);

var p3 = /* record */[
  /* color : PBlue */0,
  /* destination_tickets : [] */0,
  /* train_cards : [] */0,
  /* score */30,
  /* routes : [] */0,
  /* trains_remaining */2,
  /* first_turn */false,
  /* last_turn */false,
  /* bot */false
];

var p4 = /* record */[
  /* color : PRed */1,
  /* destination_tickets : [] */0,
  /* train_cards : [] */0,
  /* score */2,
  /* routes : [] */0,
  /* trains_remaining */2,
  /* first_turn */false,
  /* last_turn */false,
  /* bot */false
];

var end_state1_000 = /* player_index */st[/* player_index */0];

var end_state1_001 = /* players : :: */[
  p3,
  /* :: */[
    p4,
    /* [] */0
  ]
];

var end_state1_002 = /* routes */st[/* routes */2];

var end_state1_003 = /* destination_deck */st[/* destination_deck */3];

var end_state1_004 = /* destination_trash */st[/* destination_trash */4];

var end_state1_005 = /* choose_destinations */st[/* choose_destinations */5];

var end_state1_006 = /* train_deck */st[/* train_deck */6];

var end_state1_007 = /* facing_up_trains */st[/* facing_up_trains */7];

var end_state1_008 = /* train_trash */st[/* train_trash */8];

var end_state1_009 = /* taking_routes */st[/* taking_routes */9];

var end_state1_010 = /* error */st[/* error */10];

var end_state1_011 = /* turn_ended */st[/* turn_ended */11];

var end_state1_012 = /* last_round */st[/* last_round */12];

var end_state1_013 = /* winner */st[/* winner */13];

var end_state1_014 = /* cards_grabbed */st[/* cards_grabbed */14];

var end_state1_015 = /* success */st[/* success */15];

var end_state1 = /* record */[
  end_state1_000,
  end_state1_001,
  end_state1_002,
  end_state1_003,
  end_state1_004,
  end_state1_005,
  end_state1_006,
  end_state1_007,
  end_state1_008,
  end_state1_009,
  end_state1_010,
  end_state1_011,
  end_state1_012,
  end_state1_013,
  end_state1_014,
  end_state1_015
];

var end_state2_000 = end_state1_000;

var end_state2_001 = /* players : :: */[
  p3,
  /* :: */[
    p4,
    /* [] */0
  ]
];

var end_state2_002 = end_state1_002;

var end_state2_003 = end_state1_003;

var end_state2_004 = end_state1_004;

var end_state2_005 = end_state1_005;

var end_state2_006 = end_state1_006;

var end_state2_007 = end_state1_007;

var end_state2_008 = end_state1_008;

var end_state2_009 = end_state1_009;

var end_state2_010 = end_state1_010;

var end_state2_011 = end_state1_011;

var end_state2_013 = /* winner : Some */[p3];

var end_state2_014 = end_state1_014;

var end_state2_015 = end_state1_015;

var end_state2 = /* record */[
  end_state2_000,
  end_state2_001,
  end_state2_002,
  end_state2_003,
  end_state2_004,
  end_state2_005,
  end_state2_006,
  end_state2_007,
  end_state2_008,
  end_state2_009,
  end_state2_010,
  end_state2_011,
  /* last_round */true,
  end_state2_013,
  end_state2_014,
  end_state2_015
];

function current_player(st) {
  return List.nth(st[/* players */1], st[/* player_index */0]);
}

function players(st) {
  return st[/* players */1];
}

function routes(st) {
  return st[/* routes */2];
}

function destination_items(st) {
  return /* tuple */[
          st[/* destination_deck */3],
          st[/* destination_trash */4]
        ];
}

function train_items(st) {
  return /* tuple */[
          st[/* train_deck */6],
          st[/* facing_up_trains */7],
          st[/* train_trash */8]
        ];
}

function error(st) {
  return st[/* error */10];
}

function success(st) {
  return st[/* success */15];
}

function turn_ended(st) {
  return st[/* turn_ended */11];
}

function last_round(st) {
  return st[/* last_round */12];
}

function choose_destinations(st) {
  return st[/* choose_destinations */5];
}

function score(st, _) {
  return Player.score(current_player(st));
}

function winner(st) {
  return st[/* winner */13];
}

function longest_route_player(st) {
  var _best = 0;
  var _i = 0;
  var _param = st[/* players */1];
  while(true) {
    var param = _param;
    var i = _i;
    var best = _best;
    if (param) {
      var t = param[1];
      var p_best = List.nth(st[/* players */1], best);
      if (Player.longest_route(param[0]) > Player.longest_route(p_best)) {
        _param = t;
        _i = i + 1 | 0;
        _best = i;
        continue ;
      } else {
        _param = t;
        _i = i + 1 | 0;
        continue ;
      }
    } else {
      return best;
    }
  };
}

function check_last_round(st) {
  var p = current_player(st);
  return Player.trains_remaining(p) <= 2;
}

function game_ended(st) {
  var _param = st[/* players */1];
  while(true) {
    var param = _param;
    if (param) {
      if (Player.last_turn(param[0])) {
        _param = param[1];
        continue ;
      } else {
        return false;
      }
    } else {
      return true;
    }
  };
}

function update_players(i, new_p, lst) {
  var _i = 0;
  var new_i = i;
  var new_p$1 = new_p;
  var _acc = /* [] */0;
  var _param = lst;
  while(true) {
    var param = _param;
    var acc = _acc;
    var i$1 = _i;
    if (param) {
      var t = param[1];
      if (i$1 === new_i) {
        return Pervasives.$at(acc, Pervasives.$at(/* :: */[
                        new_p$1,
                        /* [] */0
                      ], t));
      } else {
        _param = t;
        _acc = Pervasives.$at(acc, /* :: */[
              param[0],
              /* [] */0
            ]);
        _i = i$1 + 1 | 0;
        continue ;
      }
    } else {
      return acc;
    }
  };
}

function update_players_tickets(st) {
  var _acc = /* [] */0;
  var _param = st[/* players */1];
  while(true) {
    var param = _param;
    var acc = _acc;
    if (param) {
      var p$prime = Player.completed_destination_tickets(param[0]);
      _param = param[1];
      _acc = Pervasives.$at(acc, /* :: */[
            p$prime,
            /* [] */0
          ]);
      continue ;
    } else {
      return acc;
    }
  };
}

function calculate_winner(st) {
  var longest_i = longest_route_player(st);
  var plyrs = st[/* players */1];
  var longest_p = List.nth(plyrs, longest_i);
  var p$prime = Player.increase_score(longest_p, 10);
  var st$prime_000 = /* player_index */st[/* player_index */0];
  var st$prime_001 = /* players */update_players(longest_i, p$prime, plyrs);
  var st$prime_002 = /* routes */st[/* routes */2];
  var st$prime_003 = /* destination_deck */st[/* destination_deck */3];
  var st$prime_004 = /* destination_trash */st[/* destination_trash */4];
  var st$prime_005 = /* choose_destinations */st[/* choose_destinations */5];
  var st$prime_006 = /* train_deck */st[/* train_deck */6];
  var st$prime_007 = /* facing_up_trains */st[/* facing_up_trains */7];
  var st$prime_008 = /* train_trash */st[/* train_trash */8];
  var st$prime_009 = /* taking_routes */st[/* taking_routes */9];
  var st$prime_010 = /* error */st[/* error */10];
  var st$prime_011 = /* turn_ended */st[/* turn_ended */11];
  var st$prime_012 = /* last_round */st[/* last_round */12];
  var st$prime_013 = /* winner */st[/* winner */13];
  var st$prime_014 = /* cards_grabbed */st[/* cards_grabbed */14];
  var st$prime_015 = /* success */st[/* success */15];
  var st$prime = /* record */[
    st$prime_000,
    st$prime_001,
    st$prime_002,
    st$prime_003,
    st$prime_004,
    st$prime_005,
    st$prime_006,
    st$prime_007,
    st$prime_008,
    st$prime_009,
    st$prime_010,
    st$prime_011,
    st$prime_012,
    st$prime_013,
    st$prime_014,
    st$prime_015
  ];
  var st$prime$prime_000 = /* player_index */st[/* player_index */0];
  var st$prime$prime_001 = /* players */update_players_tickets(st$prime);
  var st$prime$prime_002 = /* routes */st[/* routes */2];
  var st$prime$prime_003 = /* destination_deck */st[/* destination_deck */3];
  var st$prime$prime_004 = /* destination_trash */st[/* destination_trash */4];
  var st$prime$prime_005 = /* choose_destinations */st[/* choose_destinations */5];
  var st$prime$prime_006 = /* train_deck */st[/* train_deck */6];
  var st$prime$prime_007 = /* facing_up_trains */st[/* facing_up_trains */7];
  var st$prime$prime_008 = /* train_trash */st[/* train_trash */8];
  var st$prime$prime_009 = /* taking_routes */st[/* taking_routes */9];
  var st$prime$prime_010 = /* error */st[/* error */10];
  var st$prime$prime_011 = /* turn_ended */st[/* turn_ended */11];
  var st$prime$prime_012 = /* last_round */st[/* last_round */12];
  var st$prime$prime_013 = /* winner */st[/* winner */13];
  var st$prime$prime_014 = /* cards_grabbed */st[/* cards_grabbed */14];
  var st$prime$prime_015 = /* success */st[/* success */15];
  var st$prime$prime = /* record */[
    st$prime$prime_000,
    st$prime$prime_001,
    st$prime$prime_002,
    st$prime$prime_003,
    st$prime$prime_004,
    st$prime$prime_005,
    st$prime$prime_006,
    st$prime$prime_007,
    st$prime$prime_008,
    st$prime$prime_009,
    st$prime$prime_010,
    st$prime$prime_011,
    st$prime$prime_012,
    st$prime$prime_013,
    st$prime$prime_014,
    st$prime$prime_015
  ];
  var loop = function (_best, _param) {
    while(true) {
      var param = _param;
      var best = _best;
      if (param) {
        var t = param[1];
        var p = param[0];
        if (best) {
          if (Player.score(p) > Player.score(best[0])) {
            _param = t;
            _best = /* Some */[p];
            continue ;
          } else {
            _param = t;
            continue ;
          }
        } else {
          _param = t;
          _best = /* Some */[p];
          continue ;
        }
      } else {
        return best;
      }
    };
  };
  return /* tuple */[
          st$prime$prime,
          loop(/* None */0, st$prime$prime_001)
        ];
}

function turn_ended_error(st) {
  return /* record */[
          /* player_index */st[/* player_index */0],
          /* players */st[/* players */1],
          /* routes */st[/* routes */2],
          /* destination_deck */st[/* destination_deck */3],
          /* destination_trash */st[/* destination_trash */4],
          /* choose_destinations */st[/* choose_destinations */5],
          /* train_deck */st[/* train_deck */6],
          /* facing_up_trains */st[/* facing_up_trains */7],
          /* train_trash */st[/* train_trash */8],
          /* taking_routes */st[/* taking_routes */9],
          /* error */"Turn has already ended for the current player.",
          /* turn_ended */st[/* turn_ended */11],
          /* last_round */st[/* last_round */12],
          /* winner */st[/* winner */13],
          /* cards_grabbed */st[/* cards_grabbed */14],
          /* success */""
        ];
}

function first_turn_error(st) {
  return /* record */[
          /* player_index */st[/* player_index */0],
          /* players */st[/* players */1],
          /* routes */st[/* routes */2],
          /* destination_deck */st[/* destination_deck */3],
          /* destination_trash */st[/* destination_trash */4],
          /* choose_destinations */st[/* choose_destinations */5],
          /* train_deck */st[/* train_deck */6],
          /* facing_up_trains */st[/* facing_up_trains */7],
          /* train_trash */st[/* train_trash */8],
          /* taking_routes */st[/* taking_routes */9],
          /* error */"Can't call this function in the first turn, must choose destination tickets first. ",
          /* turn_ended */st[/* turn_ended */11],
          /* last_round */st[/* last_round */12],
          /* winner */st[/* winner */13],
          /* cards_grabbed */st[/* cards_grabbed */14],
          /* success */""
        ];
}

function grabbing_cards_error(st) {
  return /* record */[
          /* player_index */st[/* player_index */0],
          /* players */st[/* players */1],
          /* routes */st[/* routes */2],
          /* destination_deck */st[/* destination_deck */3],
          /* destination_trash */st[/* destination_trash */4],
          /* choose_destinations */st[/* choose_destinations */5],
          /* train_deck */st[/* train_deck */6],
          /* facing_up_trains */st[/* facing_up_trains */7],
          /* train_trash */st[/* train_trash */8],
          /* taking_routes */st[/* taking_routes */9],
          /* error */"You still need to grab another card from the pile or facing up cards.",
          /* turn_ended */st[/* turn_ended */11],
          /* last_round */st[/* last_round */12],
          /* winner */st[/* winner */13],
          /* cards_grabbed */st[/* cards_grabbed */14],
          /* success */""
        ];
}

function stringify_clr(param) {
  switch (param) {
    case 0 : 
        return "blue";
    case 1 : 
        return "red";
    case 2 : 
        return "yellow";
    case 3 : 
        return "green";
    case 4 : 
        return "black";
    
  }
}

function draw_card_facing_up(st, i) {
  if (st[/* turn_ended */11]) {
    return turn_ended_error(st);
  } else if (Player.first_turn(current_player(st))) {
    return first_turn_error(st);
  } else {
    var match = Components.TrainDeck[/* draw_faceup */7](st[/* train_deck */6], i, st[/* facing_up_trains */7], st[/* train_trash */8]);
    var match$1 = match[1];
    var p$prime = Player.draw_train_card(current_player(st), match[0]);
    var i$1 = st[/* player_index */0];
    return /* record */[
            /* player_index */st[/* player_index */0],
            /* players */update_players(i$1, p$prime, st[/* players */1]),
            /* routes */st[/* routes */2],
            /* destination_deck */st[/* destination_deck */3],
            /* destination_trash */st[/* destination_trash */4],
            /* choose_destinations */st[/* choose_destinations */5],
            /* train_deck */match$1[1],
            /* facing_up_trains */match$1[0],
            /* train_trash */match$1[2],
            /* taking_routes */st[/* taking_routes */9],
            /* error */"",
            /* turn_ended */(st[/* cards_grabbed */14] + 1 | 0) === 2,
            /* last_round */st[/* last_round */12],
            /* winner */st[/* winner */13],
            /* cards_grabbed */st[/* cards_grabbed */14] + 1 | 0,
            /* success */"Train card drawn."
          ];
  }
}

function draw_card_pile_no_error(st) {
  var tr = st[/* train_trash */8];
  var match = Components.TrainDeck[/* draw_card */3](st[/* train_deck */6], tr);
  var p = Player.draw_train_card(current_player(st), match[0]);
  var i = st[/* player_index */0];
  return /* record */[
          /* player_index */st[/* player_index */0],
          /* players */update_players(i, p, st[/* players */1]),
          /* routes */st[/* routes */2],
          /* destination_deck */st[/* destination_deck */3],
          /* destination_trash */st[/* destination_trash */4],
          /* choose_destinations */st[/* choose_destinations */5],
          /* train_deck */match[1],
          /* facing_up_trains */st[/* facing_up_trains */7],
          /* train_trash */match[2],
          /* taking_routes */st[/* taking_routes */9],
          /* error */"",
          /* turn_ended */st[/* turn_ended */11],
          /* last_round */st[/* last_round */12],
          /* winner */st[/* winner */13],
          /* cards_grabbed */st[/* cards_grabbed */14],
          /* success */""
        ];
}

function draw_card_pile(st) {
  if (st[/* turn_ended */11]) {
    return turn_ended_error(st);
  } else {
    var st$prime = draw_card_pile_no_error(st);
    return /* record */[
            /* player_index */st$prime[/* player_index */0],
            /* players */st$prime[/* players */1],
            /* routes */st$prime[/* routes */2],
            /* destination_deck */st$prime[/* destination_deck */3],
            /* destination_trash */st$prime[/* destination_trash */4],
            /* choose_destinations */st$prime[/* choose_destinations */5],
            /* train_deck */st$prime[/* train_deck */6],
            /* facing_up_trains */st$prime[/* facing_up_trains */7],
            /* train_trash */st$prime[/* train_trash */8],
            /* taking_routes */st$prime[/* taking_routes */9],
            /* error */"",
            /* turn_ended */(st$prime[/* cards_grabbed */14] + 1 | 0) === 2,
            /* last_round */st$prime[/* last_round */12],
            /* winner */st$prime[/* winner */13],
            /* cards_grabbed */st$prime[/* cards_grabbed */14] + 1 | 0,
            /* success */"Train card drawn."
          ];
  }
}

function take_route(st) {
  if (st[/* cards_grabbed */14] === 1) {
    return grabbing_cards_error(st);
  } else if (st[/* turn_ended */11]) {
    return turn_ended_error(st);
  } else {
    var deck = st[/* destination_deck */3];
    var tr = st[/* destination_trash */4];
    var match = Components.DestinationDeck[/* draw_card */4](deck, tr);
    return /* record */[
            /* player_index */st[/* player_index */0],
            /* players */st[/* players */1],
            /* routes */st[/* routes */2],
            /* destination_deck */match[1],
            /* destination_trash */st[/* destination_trash */4],
            /* choose_destinations */match[0],
            /* train_deck */st[/* train_deck */6],
            /* facing_up_trains */st[/* facing_up_trains */7],
            /* train_trash */st[/* train_trash */8],
            /* taking_routes */true,
            /* error */"",
            /* turn_ended */st[/* turn_ended */11],
            /* last_round */st[/* last_round */12],
            /* winner */st[/* winner */13],
            /* cards_grabbed */st[/* cards_grabbed */14],
            /* success */"Three destination tickets are now available to choose from."
          ];
  }
}

function setup_state(st) {
  if (st[/* turn_ended */11]) {
    return turn_ended_error(st);
  } else if (Player.first_turn(current_player(st))) {
    var st1 = draw_card_pile_no_error(st);
    var st2 = draw_card_pile_no_error(st1);
    var st3 = draw_card_pile_no_error(st2);
    return take_route(draw_card_pile_no_error(st3));
  } else {
    return /* record */[
            /* player_index */st[/* player_index */0],
            /* players */st[/* players */1],
            /* routes */st[/* routes */2],
            /* destination_deck */st[/* destination_deck */3],
            /* destination_trash */st[/* destination_trash */4],
            /* choose_destinations */st[/* choose_destinations */5],
            /* train_deck */st[/* train_deck */6],
            /* facing_up_trains */st[/* facing_up_trains */7],
            /* train_trash */st[/* train_trash */8],
            /* taking_routes */st[/* taking_routes */9],
            /* error */"Can't setup when it is not the first turn.",
            /* turn_ended */st[/* turn_ended */11],
            /* last_round */st[/* last_round */12],
            /* winner */st[/* winner */13],
            /* cards_grabbed */st[/* cards_grabbed */14],
            /* success */""
          ];
  }
}

function decided_routes(st, indexes) {
  if (st[/* cards_grabbed */14] === 1) {
    return grabbing_cards_error(st);
  } else if (st[/* turn_ended */11]) {
    return turn_ended_error(st);
  } else if (st[/* taking_routes */9]) {
    var p = current_player(st);
    var required_tickets = Player.first_turn(p) ? 2 : 1;
    var tickets_chosen = List.length(indexes);
    if (tickets_chosen >= required_tickets) {
      var choose = st[/* choose_destinations */5];
      var loop = function (_acc, _param) {
        while(true) {
          var param = _param;
          var acc = _acc;
          if (param) {
            _param = param[1];
            _acc = /* :: */[
              List.nth(choose, param[0]),
              acc
            ];
            continue ;
          } else {
            return acc;
          }
        };
      };
      var tickets = loop(/* [] */0, indexes);
      var p$prime = Player.update_destination_tickets(p, tickets);
      var i = st[/* player_index */0];
      return /* record */[
              /* player_index */st[/* player_index */0],
              /* players */update_players(i, p$prime, st[/* players */1]),
              /* routes */st[/* routes */2],
              /* destination_deck */st[/* destination_deck */3],
              /* destination_trash */st[/* destination_trash */4],
              /* choose_destinations : [] */0,
              /* train_deck */st[/* train_deck */6],
              /* facing_up_trains */st[/* facing_up_trains */7],
              /* train_trash */st[/* train_trash */8],
              /* taking_routes */false,
              /* error */"",
              /* turn_ended */true,
              /* last_round */st[/* last_round */12],
              /* winner */st[/* winner */13],
              /* cards_grabbed */st[/* cards_grabbed */14],
              /* success */"Took " + (String(tickets_chosen) + " destination tickets.")
            ];
    } else {
      return /* record */[
              /* player_index */st[/* player_index */0],
              /* players */st[/* players */1],
              /* routes */st[/* routes */2],
              /* destination_deck */st[/* destination_deck */3],
              /* destination_trash */st[/* destination_trash */4],
              /* choose_destinations */st[/* choose_destinations */5],
              /* train_deck */st[/* train_deck */6],
              /* facing_up_trains */st[/* facing_up_trains */7],
              /* train_trash */st[/* train_trash */8],
              /* taking_routes */st[/* taking_routes */9],
              /* error */"Player only chose " + (String(tickets_chosen) + (" tickets, must take at least " + (String(required_tickets) + "."))),
              /* turn_ended */st[/* turn_ended */11],
              /* last_round */st[/* last_round */12],
              /* winner */st[/* winner */13],
              /* cards_grabbed */st[/* cards_grabbed */14],
              /* success */""
            ];
    }
  } else {
    return /* record */[
            /* player_index */st[/* player_index */0],
            /* players */st[/* players */1],
            /* routes */st[/* routes */2],
            /* destination_deck */st[/* destination_deck */3],
            /* destination_trash */st[/* destination_trash */4],
            /* choose_destinations */st[/* choose_destinations */5],
            /* train_deck */st[/* train_deck */6],
            /* facing_up_trains */st[/* facing_up_trains */7],
            /* train_trash */st[/* train_trash */8],
            /* taking_routes */st[/* taking_routes */9],
            /* error */"Must take destination tickets first.",
            /* turn_ended */st[/* turn_ended */11],
            /* last_round */st[/* last_round */12],
            /* winner */st[/* winner */13],
            /* cards_grabbed */st[/* cards_grabbed */14],
            /* success */""
          ];
  }
}

function update_routes(routes, old_r, new_r) {
  var _acc = /* [] */0;
  var _param = routes;
  while(true) {
    var param = _param;
    var acc = _acc;
    if (param) {
      var t = param[1];
      var h = param[0];
      if (Caml_obj.caml_equal(h, old_r)) {
        return Pervasives.$at(acc, Pervasives.$at(/* :: */[
                        new_r,
                        /* [] */0
                      ], t));
      } else {
        _param = t;
        _acc = Pervasives.$at(acc, /* :: */[
              h,
              /* [] */0
            ]);
        continue ;
      }
    } else {
      return acc;
    }
  };
}

function check_cards(cards, n, clr) {
  var loop = function (_param) {
    while(true) {
      var param = _param;
      if (param) {
        var match = param[0];
        if (Caml_obj.caml_equal(match[0], clr)) {
          return match[1];
        } else {
          _param = param[1];
          continue ;
        }
      } else {
        return 0;
      }
    };
  };
  return loop(cards) >= n;
}

function place_on_board(st, r, clr, wild) {
  var cards = Player.train_cards(current_player(st));
  var n = r[2];
  var num_clr = n - wild | 0;
  if (check_cards(cards, num_clr, clr) && check_cards(cards, wild, /* Wild */8)) {
    var num_trains = Player.trains_remaining(current_player(st));
    if (num_trains >= n) {
      var p_clr = current_player(st)[/* color */0];
      var r$prime_000 = r[0];
      var r$prime_001 = r[1];
      var r$prime_002 = r[2];
      var r$prime_003 = r[3];
      var r$prime_004 = /* Some */[p_clr];
      var r$prime_005 = r[5];
      var r$prime_006 = r[6];
      var r$prime = /* tuple */[
        r$prime_000,
        r$prime_001,
        r$prime_002,
        r$prime_003,
        r$prime_004,
        r$prime_005,
        r$prime_006
      ];
      var p$prime = Player.place_train(current_player(st), clr, r$prime, wild);
      var i = st[/* player_index */0];
      return /* record */[
              /* player_index */st[/* player_index */0],
              /* players */update_players(i, p$prime, st[/* players */1]),
              /* routes */update_routes(st[/* routes */2], r, r$prime),
              /* destination_deck */st[/* destination_deck */3],
              /* destination_trash */st[/* destination_trash */4],
              /* choose_destinations */st[/* choose_destinations */5],
              /* train_deck */st[/* train_deck */6],
              /* facing_up_trains */st[/* facing_up_trains */7],
              /* train_trash */st[/* train_trash */8],
              /* taking_routes */st[/* taking_routes */9],
              /* error */"",
              /* turn_ended */true,
              /* last_round */st[/* last_round */12],
              /* winner */st[/* winner */13],
              /* cards_grabbed */st[/* cards_grabbed */14],
              /* success */"Placed trains on route."
            ];
    } else {
      return /* record */[
              /* player_index */st[/* player_index */0],
              /* players */st[/* players */1],
              /* routes */st[/* routes */2],
              /* destination_deck */st[/* destination_deck */3],
              /* destination_trash */st[/* destination_trash */4],
              /* choose_destinations */st[/* choose_destinations */5],
              /* train_deck */st[/* train_deck */6],
              /* facing_up_trains */st[/* facing_up_trains */7],
              /* train_trash */st[/* train_trash */8],
              /* taking_routes */st[/* taking_routes */9],
              /* error */"Not enough trains.",
              /* turn_ended */st[/* turn_ended */11],
              /* last_round */st[/* last_round */12],
              /* winner */st[/* winner */13],
              /* cards_grabbed */st[/* cards_grabbed */14],
              /* success */""
            ];
    }
  } else {
    return /* record */[
            /* player_index */st[/* player_index */0],
            /* players */st[/* players */1],
            /* routes */st[/* routes */2],
            /* destination_deck */st[/* destination_deck */3],
            /* destination_trash */st[/* destination_trash */4],
            /* choose_destinations */st[/* choose_destinations */5],
            /* train_deck */st[/* train_deck */6],
            /* facing_up_trains */st[/* facing_up_trains */7],
            /* train_trash */st[/* train_trash */8],
            /* taking_routes */st[/* taking_routes */9],
            /* error */"Not enough train cards.",
            /* turn_ended */st[/* turn_ended */11],
            /* last_round */st[/* last_round */12],
            /* winner */st[/* winner */13],
            /* cards_grabbed */st[/* cards_grabbed */14],
            /* success */""
          ];
  }
}

function select_route(st, r, clr, wild) {
  if (st[/* cards_grabbed */14] === 1) {
    return grabbing_cards_error(st);
  } else if (st[/* turn_ended */11]) {
    return turn_ended_error(st);
  } else if (Player.first_turn(current_player(st))) {
    return first_turn_error(st);
  } else {
    var clr$1 = r[3];
    if (r[4]) {
      return /* record */[
              /* player_index */st[/* player_index */0],
              /* players */st[/* players */1],
              /* routes */st[/* routes */2],
              /* destination_deck */st[/* destination_deck */3],
              /* destination_trash */st[/* destination_trash */4],
              /* choose_destinations */st[/* choose_destinations */5],
              /* train_deck */st[/* train_deck */6],
              /* facing_up_trains */st[/* facing_up_trains */7],
              /* train_trash */st[/* train_trash */8],
              /* taking_routes */st[/* taking_routes */9],
              /* error */"Route already taken.",
              /* turn_ended */st[/* turn_ended */11],
              /* last_round */st[/* last_round */12],
              /* winner */st[/* winner */13],
              /* cards_grabbed */st[/* cards_grabbed */14],
              /* success */""
            ];
    } else if (clr$1 >= 9) {
      if (clr) {
        return place_on_board(st, r, clr[0], wild);
      } else {
        return /* record */[
                /* player_index */st[/* player_index */0],
                /* players */st[/* players */1],
                /* routes */st[/* routes */2],
                /* destination_deck */st[/* destination_deck */3],
                /* destination_trash */st[/* destination_trash */4],
                /* choose_destinations */st[/* choose_destinations */5],
                /* train_deck */st[/* train_deck */6],
                /* facing_up_trains */st[/* facing_up_trains */7],
                /* train_trash */st[/* train_trash */8],
                /* taking_routes */st[/* taking_routes */9],
                /* error */"Choose a train card color.",
                /* turn_ended */st[/* turn_ended */11],
                /* last_round */st[/* last_round */12],
                /* winner */st[/* winner */13],
                /* cards_grabbed */st[/* cards_grabbed */14],
                /* success */""
              ];
      }
    } else {
      return place_on_board(st, r, clr$1, wild);
    }
  }
}

function ai_move(st, second) {
  var p = current_player(st);
  if (Player.first_turn(p)) {
    var st$prime = setup_state(st);
    var choose = st$prime[/* choose_destinations */5];
    var lst = Ai.ai_setup(p, choose);
    return next_player(decided_routes(st$prime, lst));
  } else {
    var routes = st[/* routes */2];
    var facing_up = st[/* facing_up_trains */7];
    var match = Ai.next_move(routes, second, facing_up, p);
    var tmp;
    switch (match) {
      case 0 : 
          var st$prime$1 = take_route(st);
          var choose$1 = st$prime$1[/* choose_destinations */5];
          var lst$1 = Ai.ai_take_dticket(p, routes, choose$1);
          tmp = decided_routes(st$prime$1, lst$1);
          break;
      case 1 : 
          var match$1 = Ai.ai_place_train(p, routes);
          tmp = select_route(st, match$1[0], /* Some */[match$1[1]], match$1[2]);
          break;
      case 2 : 
          var i = Ai.ai_facing_up(p, routes, facing_up);
          var st$prime$2 = draw_card_facing_up(st, i);
          tmp = second ? st$prime$2 : ai_move(st$prime$2, true);
          break;
      case 3 : 
          var st$prime$3 = draw_card_pile(st);
          tmp = second ? st$prime$3 : ai_move(st$prime$3, true);
          break;
      
    }
    return next_player(tmp);
  }
}

function next_player(st) {
  if (st[/* cards_grabbed */14] === 1) {
    return grabbing_cards_error(st);
  } else if (st[/* turn_ended */11]) {
    if (game_ended(st)) {
      var st$1 = st;
      var match = calculate_winner(st$1);
      var st$prime = match[0];
      return /* record */[
              /* player_index */st$prime[/* player_index */0],
              /* players */st$prime[/* players */1],
              /* routes */st$prime[/* routes */2],
              /* destination_deck */st$prime[/* destination_deck */3],
              /* destination_trash */st$prime[/* destination_trash */4],
              /* choose_destinations */st$prime[/* choose_destinations */5],
              /* train_deck */st$prime[/* train_deck */6],
              /* facing_up_trains */st$prime[/* facing_up_trains */7],
              /* train_trash */st$prime[/* train_trash */8],
              /* taking_routes */st$prime[/* taking_routes */9],
              /* error */"Game has ended.",
              /* turn_ended */st$prime[/* turn_ended */11],
              /* last_round */st$prime[/* last_round */12],
              /* winner */match[1],
              /* cards_grabbed */st$prime[/* cards_grabbed */14],
              /* success */""
            ];
    } else {
      var p_clr = stringify_clr(Player.color(current_player(st)));
      var next_player$1 = Caml_int32.mod_(st[/* player_index */0] + 1 | 0, List.length(st[/* players */1]));
      var st$prime_001 = /* players */st[/* players */1];
      var st$prime_002 = /* routes */st[/* routes */2];
      var st$prime_003 = /* destination_deck */st[/* destination_deck */3];
      var st$prime_004 = /* destination_trash */st[/* destination_trash */4];
      var st$prime_005 = /* choose_destinations */st[/* choose_destinations */5];
      var st$prime_006 = /* train_deck */st[/* train_deck */6];
      var st$prime_007 = /* facing_up_trains */st[/* facing_up_trains */7];
      var st$prime_008 = /* train_trash */st[/* train_trash */8];
      var st$prime_009 = /* taking_routes */st[/* taking_routes */9];
      var st$prime_012 = /* last_round */st[/* last_round */12];
      var st$prime_013 = /* winner */st[/* winner */13];
      var st$prime_015 = /* success */"Now " + (p_clr + "'s turn.");
      var st$prime$1 = /* record */[
        /* player_index */next_player$1,
        st$prime_001,
        st$prime_002,
        st$prime_003,
        st$prime_004,
        st$prime_005,
        st$prime_006,
        st$prime_007,
        st$prime_008,
        st$prime_009,
        /* error */"",
        /* turn_ended */false,
        st$prime_012,
        st$prime_013,
        /* cards_grabbed */0,
        st$prime_015
      ];
      var ai = Player.is_bot(current_player(st$prime$1));
      if (check_last_round(st) || st[/* last_round */12]) {
        var p$prime = Player.set_last_turn(current_player(st$prime$1));
        var st$prime_001$1 = /* players */update_players(next_player$1, p$prime, st$prime_001);
        var st$prime_002$1 = st$prime_002;
        var st$prime_003$1 = st$prime_003;
        var st$prime_004$1 = st$prime_004;
        var st$prime_005$1 = st$prime_005;
        var st$prime_006$1 = st$prime_006;
        var st$prime_007$1 = st$prime_007;
        var st$prime_008$1 = st$prime_008;
        var st$prime_009$1 = st$prime_009;
        var st$prime_013$1 = st$prime_013;
        var st$prime_015$1 = st$prime_015;
        var st$prime$2 = /* record */[
          /* player_index */next_player$1,
          st$prime_001$1,
          st$prime_002$1,
          st$prime_003$1,
          st$prime_004$1,
          st$prime_005$1,
          st$prime_006$1,
          st$prime_007$1,
          st$prime_008$1,
          st$prime_009$1,
          /* error */"",
          /* turn_ended */false,
          /* last_round */true,
          st$prime_013$1,
          /* cards_grabbed */0,
          st$prime_015$1
        ];
        if (ai) {
          return ai_move(st$prime$2, false);
        } else {
          return st$prime$2;
        }
      } else if (ai) {
        return ai_move(st$prime$1, false);
      } else {
        return st$prime$1;
      }
    }
  } else {
    return /* record */[
            /* player_index */st[/* player_index */0],
            /* players */st[/* players */1],
            /* routes */st[/* routes */2],
            /* destination_deck */st[/* destination_deck */3],
            /* destination_trash */st[/* destination_trash */4],
            /* choose_destinations */st[/* choose_destinations */5],
            /* train_deck */st[/* train_deck */6],
            /* facing_up_trains */st[/* facing_up_trains */7],
            /* train_trash */st[/* train_trash */8],
            /* taking_routes */st[/* taking_routes */9],
            /* error */"Turn has not ended yet for the current player.",
            /* turn_ended */st[/* turn_ended */11],
            /* last_round */st[/* last_round */12],
            /* winner */st[/* winner */13],
            /* cards_grabbed */st[/* cards_grabbed */14],
            /* success */""
          ];
  }
}

exports.init_state = init_state;
exports.end_state1 = end_state1;
exports.end_state2 = end_state2;
exports.current_player = current_player;
exports.players = players;
exports.routes = routes;
exports.destination_items = destination_items;
exports.train_items = train_items;
exports.error = error;
exports.success = success;
exports.turn_ended = turn_ended;
exports.last_round = last_round;
exports.choose_destinations = choose_destinations;
exports.score = score;
exports.winner = winner;
exports.longest_route_player = longest_route_player;
exports.setup_state = setup_state;
exports.next_player = next_player;
exports.draw_card_pile = draw_card_pile;
exports.draw_card_facing_up = draw_card_facing_up;
exports.take_route = take_route;
exports.decided_routes = decided_routes;
exports.select_route = select_route;
/* st Not a pure module */
