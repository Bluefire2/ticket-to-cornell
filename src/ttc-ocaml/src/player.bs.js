// Generated by BUCKLESCRIPT VERSION 3.0.0, PLEASE EDIT WITH CARE
'use strict';

var Board = require("./board.bs.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");

function color_of_int(n) {
  if (n > 4 || n < 0) {
    return Pervasives.failwith("impossible");
  } else {
    return n;
  }
}

function remove_color(n, c, _h) {
  while(true) {
    var h = _h;
    if (n === 0) {
      return h;
    } else if (h) {
      var b = h[1];
      var match = h[0];
      var a1 = match[0];
      if (Caml_obj.caml_equal(a1, c)) {
        return /* :: */[
                /* tuple */[
                  a1,
                  match[1] - n | 0
                ],
                b
              ];
      } else {
        _h = b;
        continue ;
      }
    } else {
      return /* [] */0;
    }
  };
}

function destination_tickets(p) {
  return p[/* destination_tickets */1];
}

function routes(p) {
  return p[/* routes */4];
}

function update_destination_tickets(p, tickets) {
  return /* record */[
          /* color */p[/* color */0],
          /* destination_tickets */Pervasives.$at(tickets, p[/* destination_tickets */1]),
          /* train_cards */p[/* train_cards */2],
          /* score */p[/* score */3],
          /* routes */p[/* routes */4],
          /* trains_remaining */p[/* trains_remaining */5],
          /* first_turn */false,
          /* last_turn */p[/* last_turn */7]
        ];
}

function train_cards(p) {
  return p[/* train_cards */2];
}

function score(p) {
  return p[/* score */3];
}

function first_turn(p) {
  return p[/* first_turn */6];
}

function last_turn(p) {
  return p[/* last_turn */7];
}

function trains_remaining(p) {
  return p[/* trains_remaining */5];
}

function add_train_cards(_tlist, c, _acc) {
  while(true) {
    var acc = _acc;
    var tlist = _tlist;
    if (tlist) {
      var t = tlist[1];
      var match = tlist[0];
      var b = match[1];
      var a = match[0];
      if (Caml_obj.caml_equal(c, a)) {
        return Pervasives.$at(acc, /* :: */[
                    /* tuple */[
                      a,
                      b + 1 | 0
                    ],
                    t
                  ]);
      } else {
        _acc = Pervasives.$at(acc, /* :: */[
              /* tuple */[
                a,
                b
              ],
              /* [] */0
            ]);
        _tlist = t;
        continue ;
      }
    } else {
      return acc;
    }
  };
}

function color(p) {
  return p[/* color */0];
}

function init_players(n) {
  if (n !== 0) {
    var p_000 = /* color */color_of_int(n - 1 | 0);
    var p_002 = /* train_cards : :: */[
      /* tuple */[
        /* Red */0,
        0
      ],
      /* :: */[
        /* tuple */[
          /* Blue */2,
          0
        ],
        /* :: */[
          /* tuple */[
            /* Green */1,
            0
          ],
          /* :: */[
            /* tuple */[
              /* Yellow */3,
              0
            ],
            /* :: */[
              /* tuple */[
                /* Black */7,
                0
              ],
              /* :: */[
                /* tuple */[
                  /* White */6,
                  0
                ],
                /* :: */[
                  /* tuple */[
                    /* Pink */4,
                    0
                  ],
                  /* :: */[
                    /* tuple */[
                      /* Wild */8,
                      0
                    ],
                    /* :: */[
                      /* tuple */[
                        /* Orange */5,
                        0
                      ],
                      /* [] */0
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ]
    ];
    var p = /* record */[
      p_000,
      /* destination_tickets : [] */0,
      p_002,
      /* score */0,
      /* routes : [] */0,
      /* trains_remaining */45,
      /* first_turn */true,
      /* last_turn */false
    ];
    return /* :: */[
            p,
            init_players(n - 1 | 0)
          ];
  } else {
    return /* [] */0;
  }
}

function draw_train_card(p, c) {
  return /* record */[
          /* color */p[/* color */0],
          /* destination_tickets */p[/* destination_tickets */1],
          /* train_cards */add_train_cards(p[/* train_cards */2], c, /* [] */0),
          /* score */p[/* score */3],
          /* routes */p[/* routes */4],
          /* trains_remaining */p[/* trains_remaining */5],
          /* first_turn */p[/* first_turn */6],
          /* last_turn */p[/* last_turn */7]
        ];
}

function place_train(p, r) {
  return /* record */[
          /* color */p[/* color */0],
          /* destination_tickets */p[/* destination_tickets */1],
          /* train_cards */remove_color(Board.get_length(r), Board.get_color(r), p[/* train_cards */2]),
          /* score */p[/* score */3] + Board.route_score(r) | 0,
          /* routes : :: */[
            r,
            p[/* routes */4]
          ],
          /* trains_remaining */p[/* trains_remaining */5] - Board.get_length(r) | 0,
          /* first_turn */p[/* first_turn */6],
          /* last_turn */p[/* last_turn */7]
        ];
}

function set_last_turn(p) {
  return /* record */[
          /* color */p[/* color */0],
          /* destination_tickets */p[/* destination_tickets */1],
          /* train_cards */p[/* train_cards */2],
          /* score */p[/* score */3],
          /* routes */p[/* routes */4],
          /* trains_remaining */p[/* trains_remaining */5],
          /* first_turn */p[/* first_turn */6],
          /* last_turn */true
        ];
}

exports.destination_tickets = destination_tickets;
exports.update_destination_tickets = update_destination_tickets;
exports.train_cards = train_cards;
exports.score = score;
exports.color = color;
exports.routes = routes;
exports.first_turn = first_turn;
exports.last_turn = last_turn;
exports.trains_remaining = trains_remaining;
exports.init_players = init_players;
exports.draw_train_card = draw_train_card;
exports.place_train = place_train;
exports.set_last_turn = set_last_turn;
/* Board Not a pure module */
