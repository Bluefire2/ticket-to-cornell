// Generated by BUCKLESCRIPT VERSION 3.0.0, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Board = require("./board.bs.js");
var State = require("./state.bs.js");
var Js_exn = require("bs-platform/lib/js/js_exn.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Components = require("./components.bs.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

function max(a, b, c) {
  return Caml_obj.caml_max(c, Caml_obj.caml_max(a, b));
}

function min(a, b, c) {
  return Caml_obj.caml_min(c, Caml_obj.caml_min(a, b));
}

function ai_setup(st) {
  var st$prime = State.setup_state(st);
  var match = State.choose_destinations(st$prime);
  var keep_tickets;
  if (match) {
    var match$1 = match[1];
    if (match$1) {
      var match$2 = match$1[1];
      if (match$2 && !match$2[1]) {
        var match$3 = match$1[0];
        var d = match$3[/* loc2 */1];
        var c = match$3[/* loc1 */0];
        var match$4 = match[0];
        var b = match$4[/* loc2 */1];
        var a = match$4[/* loc1 */0];
        if (a === c || a === d || b === c || b === d) {
          keep_tickets = /* :: */[
            0,
            /* :: */[
              1,
              /* [] */0
            ]
          ];
        } else {
          var match$5 = match$2[0];
          var f = match$5[/* loc2 */1];
          var e = match$5[/* loc1 */0];
          if (a === e || a === f || b === e || b === f) {
            keep_tickets = /* :: */[
              0,
              /* :: */[
                2,
                /* [] */0
              ]
            ];
          } else if (c === e || c === f || d === e || d === f) {
            keep_tickets = /* :: */[
              1,
              /* :: */[
                2,
                /* [] */0
              ]
            ];
          } else {
            var z = match$5[/* points */2];
            var y = match$3[/* points */2];
            var x = match$4[/* points */2];
            keep_tickets = max(x, y, z) === x && min(x, y, z) === y ? /* :: */[
                0,
                /* :: */[
                  1,
                  /* [] */0
                ]
              ] : (
                max(x, y, z) === x && min(x, y, z) === z ? /* :: */[
                    0,
                    /* :: */[
                      2,
                      /* [] */0
                    ]
                  ] : /* :: */[
                    1,
                    /* :: */[
                      2,
                      /* [] */0
                    ]
                  ]
              );
          }
        }
      } else {
        keep_tickets = Pervasives.failwith("not possible");
      }
    } else {
      keep_tickets = Pervasives.failwith("not possible");
    }
  } else {
    keep_tickets = Pervasives.failwith("not possible");
  }
  return State.decided_routes(st$prime, keep_tickets);
}

function get_val(param) {
  if (param) {
    return param[0];
  } else {
    throw [
          Caml_builtin_exceptions.failure,
          "Not_available"
        ];
  }
}

function priorize_build(_count, _acc, _param) {
  while(true) {
    var param = _param;
    var acc = _acc;
    var count = _count;
    if (param) {
      var h = param[0];
      var l = h[2];
      var t = param[1];
      _param = t;
      if (l > count) {
        _acc = /* Some */[h];
        _count = l;
        continue ;
      } else {
        continue ;
      }
    } else {
      return acc;
    }
  };
}

function extract_hand_colors(c, _param) {
  while(true) {
    var param = _param;
    if (param) {
      var match = param[0];
      if (Caml_obj.caml_equal(c, match[0])) {
        return match[1];
      } else {
        _param = param[1];
        continue ;
      }
    } else {
      return 0;
    }
  };
}

function desired_colors(_goal_routes, p, _acc) {
  while(true) {
    var acc = _acc;
    var goal_routes = _goal_routes;
    if (goal_routes) {
      var t = goal_routes[1];
      var match = goal_routes[0];
      var c = match[3];
      if (match[4] === /* None */0 && (match[2] - extract_hand_colors(c, p[/* train_cards */2]) | 0) > 0) {
        _acc = /* :: */[
          c,
          acc
        ];
        _goal_routes = t;
        continue ;
      } else {
        _goal_routes = t;
        continue ;
      }
    } else {
      return acc;
    }
  };
}

function enough_cards(hand, n) {
  while(true) {
    if (hand) {
      if (Caml_obj.caml_greaterequal(hand[0][1], n)) {
        return true;
      } else {
        continue ;
      }
    } else {
      return false;
    }
  };
}

function completed_dtickets(st, _dtickets) {
  while(true) {
    var dtickets = _dtickets;
    if (dtickets) {
      var match = dtickets[0];
      if (Board.completed(match[/* loc1 */0], match[/* loc2 */1], st[/* routes */2], /* [] */0)) {
        _dtickets = dtickets[1];
        continue ;
      } else {
        return false;
      }
    } else {
      return true;
    }
  };
}

function best_paths(param) {
  if (param) {
    var match = param[0];
    return /* :: */[
            Board.get_paths(match[/* loc1 */0], match[/* loc2 */1], /* [] */0),
            best_paths(param[1])
          ];
  } else {
    return /* [] */0;
  }
}

function best_routes(st, param) {
  if (param) {
    return /* :: */[
            Board.path_routes(st[/* routes */2], param[0]),
            best_routes(st, param[1])
          ];
  } else {
    return /* [] */0;
  }
}

function other_player(p, param) {
  var x = param[4];
  if (x) {
    return Caml_obj.caml_notequal(/* Some */[p[/* color */0]], x);
  } else {
    return false;
  }
}

function extract_goal(rts) {
  var last_el = List.nth(rts, List.length(rts) - 1 | 0);
  return Board.get_string(last_el[1]);
}

function extract_strings(rts) {
  if (rts) {
    var match = rts[0];
    return /* :: */[
            match[1][0],
            /* :: */[
              match[0][0],
              extract_strings(rts[1])
            ]
          ];
  } else {
    return /* [] */0;
  }
}

function can_build(_goal_routes, st, p) {
  while(true) {
    var goal_routes = _goal_routes;
    if (goal_routes) {
      var h = goal_routes[0];
      var c = h[3];
      var l = h[2];
      var t = goal_routes[1];
      if (h[4] === /* None */0 && (extract_hand_colors(c, p[/* train_cards */2]) === l || c === /* Grey */9 && enough_cards(p[/* train_cards */2], l))) {
        return /* :: */[
                h,
                can_build(t, st, p)
              ];
      } else {
        _goal_routes = t;
        continue ;
      }
    } else {
      return /* [] */0;
    }
  };
}

function check_routes(p, st, _rts, _acc) {
  while(true) {
    var acc = _acc;
    var rts = _rts;
    if (rts) {
      var rt = rts[0];
      if (other_player(p, rt)) {
        var goal = extract_goal(rts);
        var l1 = rt[0];
        try {
          var new_l = get_val(Board.get_next_loc(l1, goal, /* None */0, -1, /* :: */[
                    Board.get_string(rt[1]),
                    extract_strings(acc)
                  ], Board.get_neighbors(l1)));
          var new_path = Board.get_paths(new_l, goal, extract_strings(acc));
          var reroute = Board.path_routes(st[/* routes */2], new_path);
          return check_routes(p, st, reroute, /* [] */0);
        }
        catch (raw_exn){
          var exn = Js_exn.internalToOCamlException(raw_exn);
          if (exn[0] === Caml_builtin_exceptions.failure) {
            return rts;
          } else {
            throw exn;
          }
        }
      } else {
        _acc = /* :: */[
          rt,
          acc
        ];
        _rts = rts[1];
        continue ;
      }
    } else {
      return acc;
    }
  };
}

function check_routes_list(p, st, _rtss, _acc) {
  while(true) {
    var acc = _acc;
    var rtss = _rtss;
    if (rtss) {
      _acc = /* :: */[
        check_routes(p, st, rtss[0], /* [] */0),
        acc
      ];
      _rtss = rtss[1];
      continue ;
    } else {
      return acc;
    }
  };
}

function ai_move(st) {
  var cpu = State.current_player(st);
  if (completed_dtickets(st, cpu[/* destination_tickets */1]) && cpu[/* trains_remaining */5] > 5) {
    Components.DestinationDeck[/* draw_card */4](st[/* destination_deck */3], st[/* destination_trash */4]);
    return Pervasives.failwith("Unimplemented");
  } else {
    var goal_routes = best_routes(st, best_paths(cpu[/* destination_tickets */1]));
    var routes = check_routes_list(cpu, st, goal_routes, /* [] */0);
    var goal_routes$1 = List.flatten(routes);
    var build_options = can_build(goal_routes$1, st, cpu);
    if (List.length(build_options) > 0) {
      var st$1 = st;
      var build_options$1 = build_options;
      var build = get_val(priorize_build(0, /* None */0, build_options$1));
      var color = Board.get_color(build);
      return State.select_route(st$1, build, /* Some */[color]);
    } else {
      var st$2 = st;
      var p = cpu;
      var goals = goal_routes$1;
      desired_colors(goals, p, /* [] */0);
      var match = priorize_build(0, /* None */0, goals);
      if (match) {
        State.draw_card_pile(st$2);
        return State.draw_card_pile(st$2);
      } else {
        throw [
              Caml_builtin_exceptions.match_failure,
              [
                "ai.ml",
                76,
                6
              ]
            ];
      }
    }
  }
}

exports.ai_move = ai_move;
exports.ai_setup = ai_setup;
/* Board Not a pure module */
